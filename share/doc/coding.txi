@node Coding
@chapter Code --- Notes and Coding Rules

@c This file is part of `CoRB --- A Developers Handbook`
@c Copyright (C) 2008 Stefan Bienert
@c See the file fdl-1.3.txi for copying conditions.

@cindex Coding rules
@cindex Writing code
@cindex Rules for code
@cindex Notes on code
@cindex Coding style
@cindex Style of code
Since @corb{} is a cooperative software project, a common layout is regarded
indispensable. This starts at code layout --- blocks, use of whitespaces,
indentation, @dots{} ---, comes across function names, documentation and goes
on with how to write manuals.

Here we describe general notes and rules, first. In the second part of this
chapter a set of language specific rules is listed.


@menu
* General rules::               
* C::                           
@end menu


@node General rules, C, Coding, Coding
@section General rules
@cindex General rules
This is a set of rules applying to all programming languages used in @corb{}.
If you find one of these general rules not to be applicable to a certain
language please notify the author of the manual.


@menu
* Philosophy::                  
* Licensing::                   
* Documenting::                 
* Spell checking::              
* Tabs::                        
* Indentation::                 
* Line size::                   
* Punctuation::                 
* Function naming::             
* Variable naming::             
@end menu


@node Philosophy, Licensing, General rules, General rules
@subsection Philosophy
Have a look at some example files. There is a standard layout for making
functions stand out. Please do not use your own layout, even if it is prettier.
The aim is consistency and predictability.


@node Licensing, Documenting, Philosophy, General rules
@subsection Licensing
@cindex Licensing
All your contributions have to be covered by the GPL. Documentation goes with
the FDL. @xref{Using Licenses}, for details. If you do not want to put your code
under the GPL/ FDL, you can not use @corb{} for your project and we can not keep
it in @corb{}.


@node Documenting, Spell checking, Licensing, General rules
@subsection Documenting
@cindex Documentation
Document all your stuff. That is files and functions as well as programs.
@xref{Writing Documentation}, for details.


@node Spell checking, Tabs, Documenting, General rules
@subsection Spell checking
@cindex Spelling
@cindex Dictionary
Run a spell checker on your text contributions to @corb{}. That is
documentation, comments in source and especially output messages to the user.

Use a British English dictionary for spell checking.


@node Tabs, Indentation, Spell checking, General rules
@subsection Tabs
@cindex Tabs
There are @emph{no} tab characters. Use spaces.

The only exception are @file{Makefiles}. If you have to write your own targets
(e.g.@: to extend an Automake target) you still need tabs to precede rules.


@node  Indentation, Line size, Tabs, General rules
@subsection Indentation
@cindex Indentation
@cindex Parenthesis
@cindex Block layout
Indentation is almost pure Kernighan and Ritchie with three spaces. Block
parenthesis line up with the introducing statement.
In @emacs{} this can be achieved by setting @code{c-default-style}
@code{ellemtel}.


@node Line size, Punctuation, Indentation, General rules
@subsection Line size
Try to make code readable in a window of 78 columns or printed page of 78
columns. This may mean shortening your line or breaking it in a place you think
makes it more readable for others.


@node Punctuation, Function naming, Line size, General rules
@subsection Punctuation
@cindex Punctuation
There should usually be a space after punctuation, for exactly the same reasons
as in English (helping readability). Commas and semi-colons definitely want to
be followed by a space.

Do not write 
@example
   for (a=0;a<lim;a++)
@end example
@noindent
Do
@example
   for (a = 0; a < lim; a++)
@end example
@noindent
If the line is going to go beyond 78 spaces, delicately delete spaces while
trying to keep readability.


@node Function naming, Variable naming, Punctuation, General rules
@subsection Function naming
@cindex Function naming
@cindex Names

This is a set of general rules for function naming. There might exist some
extra rules for certain programming languages. These are placed in the
corresponding sections.

Start your function name with the module or class it belongs to. Very long
module/ class names may be consistently abbreviated.

Extend your function name, from left to right, with general to more specialised
phrases. Write
@example
   molecule_set_atom
@end example
@noindent
instead of
@example
   molecule_atom_set
@end example

For improved readability space your function name with underscores. Use
@example
   rna_set_sequence
@end example
@noindent
above
@example
   rnasetsequence
@end example

Try to align your names along natural language. Functions returning a Boolean
value should sound like a question. So using @code{_is_} as a prefix is always a
good idea, here.

There are exceptions to these rules in @corb{}. But these are always special
cases, e.g.@: replacement functions for the @code{printf} family from a module
@code{mprintf} are of course not called @code{mprintf_printf}. 


@node Variable naming,  , Function naming, General rules
@subsection Variable naming
@cindex Variable naming
@cindex Names

Use ``telling'' variable names. That is, do not use arbitrary character
combinations. Also do not use names which tell you the whole live of a
variable, significant abbreviations are allowed. Use
@example
  curr_atom
@end example
@noindent
above
@example
  currently_visited_atom_of_molecule
@end example
@noindent
or
@example
  ca
@end example
@noindent
For indices, single characters are allowed.


@node C,  , General rules, Coding
@section C
@cindex C rules
@cindex Coding rules for C


@menu
* CFLAGS::                      
* typedef::                     
* Ordering::                    
* Include files::               
* Boolean::                     
* Assertions::                  
* Macros::                      
* Multidimensional arrays::     
* Visibility::                  
* External Libraries::          
* Testing::                     
* Functions::                   
* Conventions and internal routines::  
* Memory allocation philosophy and responsibility::  
* File handling::               
* Conditional compilation::     
@end menu


@node CFLAGS, typedef, C, C
@subsection @env{CFLAGS}
@cindex @env{CFLAGS}
While writing code for @corb{} you have to compile with special @env{CFLAGS}
enabled. For our build system these are set by running @command{configure} with
options @option{--enable-development} and @option{--with-development}:
@example
./configure --enable-development --with-development
@end example
The flags used for developing are very restrictive and pedantic. This should
assure a very high level of compatibility among different systems.

Several compilers are supported beside @gcc{}. It is definitively a good idea to
check your code with all supported and freely available compilers. @xref{Special Targets, Special @make{} Targets, Special @make{} Targets} for more details on how @corb{}'s buildsystem simplifies testing.


@node typedef, Ordering, CFLAGS, C
@subsection @code{typedef}
@cindex @code{typedef} rules
With its information-hiding approach, @code{typedef}s are allowed in @corb{}.
Structures which are hidden from public should be @code{typedef}ed by default.


@node Ordering, Include files, typedef, C
@subsection Ordering
The order in which you declare variables should make no difference. On the
Compaq, at least within structures, the compiler makes noise unless you order
objects from largest to smallest. This avoids padding to get best alignment.


@node Include files, Boolean, Ordering, C
@subsection Include files
@cindex Include rules
@cindex Header
@cindex @code{#ifdef}
@cindex @code{#ifndef}
@cindex @code{__cplusplus}
@emph{All} source files must include @file{config.h} as topmost header. This is
the configuration header of the GNU build system and is created by the
@command{configure} script.

Standard headers should follow the configuration header immediately. After
this the @corb{} headers and your own should go.

All headers of a library are exported into a library-header named
@file{crb@i{library}.h}. This header is then included by external sources
instead of invoking module headers.

Since some systems do not cover the ANSI C standard entirely, some standard
headers have to be invoked by including @file{crbbasic.h}, the header of
@libcrbbasic{}. This library provides access to certain headers after an
evaluation of the configuration header. Headers covered by @libcrbbasic{}
are:
@itemize @bullet
  @item @file{stdbool.h}
  @item @file{pthread.h}
  @item @file{sting.h}/ @file{strings.h}
@end itemize

Your own header files must start with the license header
(@pxref{Using Licenses}), followed by the documentation header
(@pxref{Writing Documentation}). Everything C in a header has to be enclosed in
@example
   #ifdef __cplusplus
   extern "C" @{
   #endif
@end example
@noindent
and
@example
   #ifdef __cplusplus
   @}
   #endif
@end example
@noindent
Of course do not forget to surround your header code by a named conditional to
prevent multiple inclusion:
@example
   #ifndef YOUR_HEADER_H
   #define YOUR_HEADER_H

   header code @dots{}

   #endif /* YOUR_HEADER_H */
@end example


@node Boolean, Assertions, Include files, C
@subsection Boolean
Do not add your own type with a name like ``boolean'' for true/ false. This is
already handled by @corb{} in library @libcrbbasic{}. Thus, a type
@code{bool} with values @code{true}/ @code{false} is available by including
@file{crbbasic.h}.


@node Assertions, Macros, Boolean, C
@subsection Assertions
@cindex @code{assert}
@cindex Input checking
@cindex Check parameters
@cindex Parameter checking
When writing functions which could be used by other developers, usually
functions declared @code{extern}, there has to be some checking on the input
parameters. In @corb{} this is done via assertions (invoked by
@file{assert.h}), which are turned off by default. The basic idea is to force
the developer to hand over only secure input to functions. With this, there is
no more need for function-side checks in the productive version of @corb{} and
thus assertions are removed from the binary.

By this we avoid the overhead of checking for the normal user. And since we
know, that there is no such overhead, we can also use assertions at points
where it is really expensive, e.g.@: recursive functions. Usually putting an
@code{assert(SOMETHING)} only raises the constant of your running time so your
code will run longer, not endlessly.

Since assertions are not available by default, you must not do anything else
beside checking for values in an @code{assert}-statement. Something like
@example
   assert(var = function());

   function_to_work_with_new_value_of(var);
@end example
@noindent
is definitively @strong{NOT ALLOWED}.

To turn on assertions while developing, just run the @command{configure} script
with @option{--enable-assert}. Usually you want all development features
enabled so it is a better idea to use @option{--enable-development} which
invokes @option{--enable-assert} automatically.


@node Macros, Multidimensional arrays, Assertions, C
@subsection Macros
@cindex Macros
@cindex @code{#define}
@cindex @code{__FILE__}
@cindex @code{__LINE__}
We do not make extensive use of macros.

We do @emph{not} use functional macros. The problem with functional macros is
parameter evaluation. Each time a parameter is used in macro code, it is
evaluated. Assume we have a macro to find the smaller of two values:
@example
   #define MIN(X, Y) ((X) < (Y) ? (X) : (Y))
@end example
@noindent
Now we use this macro with two variables:
@example
   min = MIN(i++, j++);
@end example
@noindent
Evaluates to:
@example
   min = (i++) < (j++) ? (i++) : (j++);
@end example
@noindent
Additionally macros of such type will increase the running time of your code
when used with function calls as parameters.

We @emph{never} use variables names in macros. For example some people use
macros for loops:
@example
   #define FOR_LOOP(X) for (i = 0; i < (X); i++)
@end example
@noindent
Such macros always assume that certain variables are in current scope. This
makes code hard to understand/ debug. So the ``correct'' loop macro would be:
@example
   #define FOR_LOOP(I, X) for ((I) = 0; (I) < (X); (I)++)
@end example
@noindent
Since this is sort of a functional macro, we do not use this at all.

Nevertheless, macros are allowed for constant values. But try to avoid them
where possible, e.g.@: for some magic integer values you should use the
@code{enum} construct. Or use global constants for values which are only seen
by one module. Especially on character arrays the compiler while benefit on
this. 

There is only one case where macros are recommended. In some situations you
would like to see the file and the line number where a problem occurs in a
message. For this, C provides the @code{__FILE__} and @code{__LINE__} macros.
If you have a function, which takes the file and line number as arguments, wrap
the function by a macro and hide these arguments. E.g.@: the @corb{} memory
allocation functions use this:
@example
   #define XMALLOC(SIZE)                \
      xmalloc(SIZE, __FILE__, __LINE__)
@end example
@noindent
This assures that we can immediately catch the point where a memory block was
allocated but never freed.

Macro names are written in all upper case letters and use underscores as spaces.


@node Multidimensional arrays, Visibility, Macros, C
@subsection Multidimensional arrays
@cindex Enumerations
@cindex @code{enum}
@cindex Multidimensional arrays
@cindex Multivalue lists
Most of the time we use different values than 0 or 1 in our code, these values
have a special meaning and thus we give them special names. The same holds for
multidimensional arrays. If we have more than 1 dimension, we probably have a
list of certain attributes. To improve readability/ make code more
comprehendible, we use the attribute names as indices.

For naming values, C provides the @code{enumeration} type. Beside giving us
names for our attributes, it also tells us the size of a particular dimension. 
This is achieved by adding an extra name at the end of the @code{enum} list.

Here is a little example on how to use @code{enum}s and arrays:

Assume you want to store a list of loops of an RNA secondary structure. Since a
loop can always be determined by it's closing base pair, we just need an 2D
array as storage:
@example
  int** loops;
@end example
@noindent
Now assume you store 5' bases in address @code{loops[i][0]} and 3' bases in
@code{loops[i][1]}. As you have written this code by yourself, you know where
everything goes. But how should anybody else figure out what is the 5' or the
3' position? This would require code inspection or you just give names to the
storage of the pairing partners:
@example
  enum 
  @{
    p5_base = 0,
    p3_base,
    n_bases
  @};
@end example
@noindent
Additionally to @code{p5_base} and @code{p3_base} you have a value
@code{n_bases}. This is automatically set to 2 and should be used for
allocating the array:
@example
  loops = (int**) XMALLOC_2D(n, n_bases, sizeof(**int));
@end example
@noindent
Later you decide also to store the loop size together with the pairing partners.
With @code{enum}s this only means adding an additional value:
@example
  enum 
  @{
    p5_base = 0,
    p3_base,
    size,
    n_bases
  @};
@end example
@noindent
Now the size can be stored in @code{loops[i][size]}. Since you used
@code{n_bases} for the allocation you do not have to change anything because
now it is magically set to 3.


@node Visibility, External Libraries, Multidimensional arrays, C
@subsection Visibility
@cindex Macros
@cindex @code{enum}
We try to keep other people's namespaces as unpolluted as possible.

This means, that macros, enumerations and other constants should only be
declared in header files if they are needed external. E.g.@: error codes have to
be visible with their returning function. Everything else should go with its
utilising source.


@node External Libraries, Testing, Visibility, C
@subsection External Libraries
The Prime Directive of @corb{} is that @emph{it has to work everywhere}.

This allows external libraries as long as @corb{} still compiles and works
properly if the library is not available. Therefore the use of libraries is
restricted to additional functionality. As an exemplary scenario consider file
handling: ANSI C provides everything needed for usual ASCII files. But with
additional libraries, compressed text files can also be treated like ASCII
files. Hence the strategy should be to always provide standard C file handling
and if suitable libraries are found, also handling of different compression
formats. Another way to treat library issues is to consider them as optimisation
features as described in @ref{Conditional compilation}.

It should be needless to say that you should avoid using libraries which are
only available on single architectures.

Another thing to consider when you are planning to use an external library is
its license. @corb{} utilises the GPL, therefore you only may use libraries
which go along with it. This is not an issue of ``open source vs. proprietary
software''-annoyance but a serious law issue. To put it simple: If you use a
library with an incompatible license, this could cost you a large heap of
@emph{your} money.


ab hier

@node Testing, Functions, External Libraries, C
@subsection Testing
@cindex Test your code
@cindex Unit tests
You should test your code while writing.

Each module should be tested by a separate program. To make each test working
by calling a test program without arguments, functions should be tested with
hard coded data. 

A test program should just exit with an appropriate message on problems.

For more details on testing please refer to...


@node Functions, Conventions and internal routines, Testing, C
@subsection Functions
@cindex Functions
@itemize @bullet
@item Function headings

don;t use _ at the start of a function. _ is very often system...

@item Interfaces
@cindex Interfaces


Keep the definition of the interface minimal. If you have a C file call
@file{foo.c}, then put the public interface in @file{foo.h}.


@item Function declarations & prototypes
@cindex Declarations
@cindex Prototypes


The function type goes on its own line. If the parameter list exceeds one line,
all but the first go on their own line. The opening brace is on its own line:
@example
int
function_foo (int arg1,
              @dots{},
              int arg1098)
@{
  @dots{}
@end example

@item @code{static} Functions
@cindex @code{static}


If a function can possibly be made static, it should be. Symbols should be no
more visible than is necessary. There are also optimisation advantages (the
compiler can assume a function is local and generate only an inlined version).

If you have a static function you must Not declare it, then define it and use
it. Instead, you should define it once, before it is used.

In other words, do
@example
static int function (int arg) @{ @dots{} @}
@dots{}
b = function (a);
@end example
@noindent
Rather than
@example
static int function (int arg);
@dots{}
static int function (int arg) @{ @dots{} @}
@dots{}
b = function (a);
@end example
Obviously this rule has to be broken if there is mutual recursion.

This rule exists for consistency (it is used in every file) and to follow the
principle that we should write things the minimum number of times and lastly,
to ensure that whenever possible, a compiler is given all the information about
a static function by the time it is used.

@item Return values and errors
@cindex Errors
@cindex Error values
@cindex Error messages
@cindex @code{return}


Generally, the C functions do not print out too much information in case of
error. They must, however, return an error code. The C functions should use
@code{THROW_ERROR_MSG()} to pass on the result of @code{strerror()}/
@code{perror()}. Typically, this means the lower level C code will write
something like @samp{no such file or directory}, but it is up to the calling
function to decide whether or not to go on.

A function should return 0 if it is happy and a special value on problems. All
error codes of a module should be defined in an @code{enum}eration in its header
file.

Error codes should look like @enddots{}.
@end itemize

@node Conventions and internal routines, Memory allocation philosophy and responsibility, Functions, C
@subsection Functions Conventions and internal routines
@cindex @code{printf}
@cindex @code{fprintf}
@cindex @code{malloc}
@corb{} code may not call any of the following directly:
@itemize @bullet
@item @code{printf()}

@item @code{fprintf()} (At least not to @file{stderr}.)

@item @code{malloc()}

@end itemize

There are some general areas to think about.
@itemize @bullet

@item Printing

Functions should not print to @file{stdout} or @file{stderr} directly.
Everything should go via @code{THROW_ERROR_MSG()} or @code{mprintf()} or
@code{mfprintf()}.

If you have to print, please refer to @dots{} documentation of @libcrbbasic{}.

@item Memory allocation and @code{malloc}
@cindex @code{malloc}


Do not call @code{malloc()}. Instead, call the macro @code{XMALLOC()} or any
other from @corb{}'s own memory manager in @libcrbbasic{}. This takes exactly
the same arguments as @code{malloc()}, but expands to print out the file and
line number if @code{malloc()} fails.

For more information on memory handling please refer to @dots{} doc of
@libcrbbasic{}

@end itemize


@node Memory allocation philosophy and responsibility, File handling, Conventions and internal routines, C
@subsection Memory allocation philosophy and responsibility

Most of the time, memory is @code{malloc()}'d and @code{free()}'d at the same
level of code. There is a major exception to this. The object-driven approach
in @corb{} requires constructors wrapped around object allocation. You also must
declare an appropriate routine like @code{foo_delete()}. This routine must clean
up any occupied memory.

For more information on memory handling please refer to @dots{} doc of
@libcrbbasic{}

@node File handling, Conditional compilation, Memory allocation philosophy and responsibility, C
@subsection File handling

File handling in C is always an issue. Mostly it is seen as hard and tedious
work. Additionally opening and reading files is a source for manier errors.
Therefore we provide an interface for file handling in @corb{}. With module
gfile from library libcrbbasic, there should be no more need to invoke
low-level functions.

gfile has wrappers for opening, reading and writing files. All functions are
able to handle both, compressed and uncompressed files via one interface.
Additionally we catch all sorts of errors in the gfile module. With this, you
only have to catch an error value and we care for retrieving and reporting
error messages.

Instead of using wrappers for low-level functions, you should use higher level
functions which do the whole job you are intending to do. E.g.@: reading line
by line is already in gfile with the ability to skip comments in text.

For more information see ...doc of gfile
Before putting work into reading a certain file format, also check doc of...,
because @corb{} already supports several formats.


@node Conditional compilation,  , File handling, C
@subsection Conditional compilation
@cindex Conditional compilation
@cindex @code{#ifdef}
@cindex @code{#ifndef}
@cindex @code{__GNUC__}
@cindex @code{ptrhead}
@cindex @posix{} Threads
We do not make extensive use of conditional compilation.

Conditional compilation is used to enable/ disable certain features in an
application during the build phase. Thereby the preprocessor is used to evaluate
macros which represent the configuration options:
@example
  #ifndef HAS_FEATURE
    @dots{}
  #else
    @dots{}
  #endif
@end example
@noindent
Conditional compilation makes code hard to debug. Therefore it should not be
used broadly. Anyway, there are only rare cases where it is needed.

Here are three scenarios, where conditional compilation seems to be unavoidable:
@itemize @bullet
  @item Additional library functions
  @item Making use of special compiler features
  @item Optimisation techniques
@end itemize

For a broad discussion of external libraries and @corb{}, please refer to
@ref{External Libraries}. In principle, one can not set up rules for the use of
conditional compilation and libraries. This is due to the many ways you can
invoke libraries in your code. So the rule is just to be ``careful'' on this
issue. @strong{An example can be found in the code of the gfile module...}

One scenario where we encourage you to use conditional compilation is for
enabling @emph{additional} checking/ optimisation techniques of certain
compilers. This case is best explained by an example.

The GNU Compiler Collection provides a set of certain attributes to
declarations (see @uref{http://gcc.gnu.org/onlinedocs/gcc-4.1.2/gcc/Function-Attributes.html#Function-Attributes, the @gcc{} manual}). To use such function
attributes, you have to check which compiler is currently in use. The @gcc{}
defines the @code{__GNUC__} macro to contain the version number if invoked. 
This can easily be used to determine if it is safe to turn on @gcc{}s
@code{malloc}
 attribute:
@example
  void*
  xmalloc(const size_t, const char*, const int)
  #if defined(__GNUC__) && (__GNUC__ > 2)
       __attribute__((malloc))
  #endif /* __GNUC__ */
  ;
@end example

Another issue, where conditional compilation seems to be unavoidable, is
hardware depending optimisation. The idea of @corb{} is to have everything
implemented to work everywhere. So as a start you will not code for a certain
machine type but in generalised C. Once there is a standard solution, you might
think about some optimisations, e.g.@: parallelising your code. This is where
conditional compilation may be considered.  It can be used as a switch to
enable certain features like @posix{} threads in multi core environments.

In principle, there are two ways to switch between two versions of an
algorithm: In code and via separate declarations. Mixing two different versions
of one algorithm in one function, using macros as switches is definitively
unwanted. This is not only hard to debug, for larger code segments it is
regarded as impossible to read code without slipping something. Therefore we
switch between different implementations of the same function. Thereby no
preprocessor directive occurs in code but on the level of declaration. 

Explicitly this means, that we duplicate a function to be optimised, leave the
general version unchanged and optimise the copy. Both versions are then wrapped
into preprocessor conditionals. On major code changes this probably means that
we have to do changes twice/ recreate the optimised copy by cut n' paste but we
gain very much better readability.

Again, do not
@example
  void function_foobar (void)
  @{
     /* bar code */
     @dots{}

     #ifdef FEATURE_FOO
        /* foo code */
        @dots{}
     #endif

     /* more bar code */
     @dots{}

     #ifdef FEATURE_FOO
        /* more foo code */
        @dots{}
     #endif          

     #ifndef FEATURE_FOO
        /* exceptional bar code only to be used if FOO is not available */
        @dots{}
     #endif

     @dots{}
  @}
@end example
@noindent
Do
@example
  #ifdef FEATURE_FOO  /* we have FOO */
  void function_foobar (void)
  @{
     /* bar code */
     @dots{}

     /* foo code */
     @dots{}

     /* more bar code */
     @dots{}

     /* more foo code */
     @dots{}
  @}
  #else               /* no FOO available */
  void function_foobar (void)
  @{
     /* bar code */
     @dots{}

     /* more bar code */
     @dots{}

     /* exceptional bar code only to be used if FOO is not available */
     @dots{}
  @}
  #endif
@end example

As everywhere in live, there is one exception for the function splitting. When
using @posix{} threads, you probably need mutexes. If the only change to a
function while using threads is switching on and off or waiting for a mutex,
you might do this within the generalised code. In @libcrbbasic{} this is
already used at some points without obfuscating the code.

The macro signalling whether @posix{} threads are enabled or not is called
@code{HAVE_PTHREAD}.

Last but not least a little hint: Conditional compilation is in fact used
everywhere in the @corb{} code --- in the @code{__cplusplus} check in each
header. But lets just say this is OK.


-------------------------

- function names: static for modules: precede by 's': s_gfile
- create macro for C macros

- if possible: calc no. from other consts
- one reason for memmegr: valgrind/ efence not available on all systems

naming scheme
- everything lc/ uc?
- name for enums?
